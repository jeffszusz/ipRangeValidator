// Generated by CoffeeScript 1.4.0
(function() {
  var ipRangeValidator,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ipRangeValidator = (function() {

    function ipRangeValidator() {}

    ipRangeValidator.prototype.noCollisions = function(newRange, existingRanges) {
      return this._noPublicIpCollisions(newRange, existingRanges) && this._noRangeCollisions(newRange, existingRanges);
    };

    ipRangeValidator.prototype._noPublicIpCollisions = function(newRange, existingRanges) {
      var range, _ref;
      return _ref = this.dot2num(newRange.publicIp), __indexOf.call((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = existingRanges.length; _i < _len; _i++) {
          range = existingRanges[_i];
          _results.push(this.dot2num(range.publicIp));
        }
        return _results;
      }).call(this), _ref) < 0;
    };

    ipRangeValidator.prototype._noRangeCollisions = function(newRange, existingRanges) {
      var endIp, existing, newEndIp, newStartIp, startIp, _i, _len;
      for (_i = 0, _len = existingRanges.length; _i < _len; _i++) {
        existing = existingRanges[_i];
        startIp = this.dot2num(existing.startIp);
        endIp = this.dot2num(existing.endIp);
        newStartIp = this.dot2num(newRange.startIp);
        newEndIp = this.dot2num(newRange.endIp);
        if ((startIp <= newStartIp && newStartIp <= endIp)) {
          return false;
        }
        if ((startIp <= newEndIp && newEndIp <= endIp)) {
          return false;
        }
      }
      return true;
    };

    ipRangeValidator.prototype.num2dot = function(num) {
      var d, _i;
      d = num % 256;
      for (_i = 1; _i <= 3; _i++) {
        num = Math.floor(num / 256);
        d = num % 256 + '.' + d;
      }
      return d;
    };

    ipRangeValidator.prototype.dot2num = function(dot) {
      var d;
      d = dot.split('.');
      return ((((((+d[0]) * 256) + (+d[1])) * 256) + (+d[2])) * 256) + (+d[3]);
    };

    return ipRangeValidator;

  })();

  window.ipRangeValidator = ipRangeValidator;

}).call(this);
